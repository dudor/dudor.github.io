<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Unity3d on DUDOR&#39;s BLOG</title>
    <link>http://blog.joyble.com/tags/unity3d/</link>
    <description>Recent content in Unity3d on DUDOR&#39;s BLOG</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ZH</language>
    <lastBuildDate>Fri, 22 Jan 2016 09:08:51 +0000</lastBuildDate>
    
	<atom:link href="http://blog.joyble.com/tags/unity3d/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>unity3d网络组件UNET学习笔记</title>
      <link>http://blog.joyble.com/post/unity3d%E7%BD%91%E7%BB%9C%E7%BB%84%E4%BB%B6unet%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Fri, 22 Jan 2016 09:08:51 +0000</pubDate>
      
      <guid>http://blog.joyble.com/post/unity3d%E7%BD%91%E7%BB%9C%E7%BB%84%E4%BB%B6unet%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
      <description>内容翻译自http://docs.unity3d.com/Manual/UNetOverview.html
Using the NetworkManager  The NetworkManager is a component for managing the network state of a multiplayer game. It is actually implemented entirely using the HLAPI, so everything it does is available to developers in other forms. However the NetworkManager wraps up a lot of useful functionality into a single place and makes creating, running and debugging multiplayer games as simple as possible.
 NetworkManager组件是为了管理联网游戏的网络状态。实际上它完全是用HLAPI来实现的，对开发者来说它只是用另一种形式来实现了联网的功能。不管怎样它尽量简洁的包含了很多有用的功能。
 The NetworkManager can be used entirely without scripting.</description>
    </item>
    
    <item>
      <title>unity3d中多渠道批量打包方法总结</title>
      <link>http://blog.joyble.com/post/unity3d%E4%B8%AD%E5%A4%9A%E6%B8%A0%E9%81%93%E6%89%B9%E9%87%8F%E6%89%93%E5%8C%85%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/</link>
      <pubDate>Fri, 09 Oct 2015 16:39:34 +0000</pubDate>
      
      <guid>http://blog.joyble.com/post/unity3d%E4%B8%AD%E5%A4%9A%E6%B8%A0%E9%81%93%E6%89%B9%E9%87%8F%E6%89%93%E5%8C%85%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/</guid>
      <description>当游戏要上线时，不可避免的要和国内各个渠道打交道，而国内的渠道远不止十个八个这个数量，比如我公司的游戏有的都要打个100多个包，变态极了， 所以公司也有专门的打包部门，主要就是分析各个渠道的SDK，然后封装，做成接口，给各团队的游戏使用。
当然对于我们这样的小团队，平时也需要自己打包调试SDK，为了方便，根据网上查找的相关资料，也总结了一套自己的打包方法。</description>
    </item>
    
    <item>
      <title>unity3d中使用git做版本控制的心得体会</title>
      <link>http://blog.joyble.com/post/unity3d%E4%B8%AD%E4%BD%BF%E7%94%A8git%E5%81%9A%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%9A%84%E5%BF%83%E5%BE%97%E4%BD%93%E4%BC%9A/</link>
      <pubDate>Tue, 07 Jul 2015 00:39:42 +0000</pubDate>
      
      <guid>http://blog.joyble.com/post/unity3d%E4%B8%AD%E4%BD%BF%E7%94%A8git%E5%81%9A%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%9A%84%E5%BF%83%E5%BE%97%E4%BD%93%E4%BC%9A/</guid>
      <description>提起git，可以说是个程序员都听说过或使用过，我最早接触它是在GITHUB上，用它来下载源代码，后来随着工作的需要，渐渐的用在了工作中，记得某次接盘了一个C++项目，代码一大堆，可是却没有任何文档，要添加新功能却又害怕影响现在的功能，于是在本地建立了git库，进度完成一点就提交一次，这样也不怕改错代码了，大不了重新把之前的签出来就可以了，很是方便。
后来接触到了unity3d，在小组同事的帮助下渐渐入了门，当时的项目一直用的unity3d自带的asset server做版本控制，这个东西虽然是官方的，但是一点也不好用，每次和同事合并项目，总是出现丢失东西的问题，当时也没有想太多，后来随着项目文件的增多，体积也越来越臃肿，每次合并出现问题，都要花费很多时间去修复，终于大家都受不了了，在一次程序大更新中，我把版本控制换成git了。
在unity3d中使用git，需要注意以下几点
 在editor settings中，把asset serialization中的mode项切换成force text 只需要将项目中的Assets和projectsettings文件夹加入到版本库中即可  ###另附本人在unity3d中常用的gitignore文件
 [Ll]ibrary/ [Tt]emp/ [Oo]bj/ [Bb]uild/ # Autogenerated VS/MD solution and project files *.csproj *.unityproj *.sln *.suo *.user *.userprefs *.pidb *.booproj # Unity3D Generated File On Crash Reports sysinfo.txt
 </description>
    </item>
    
  </channel>
</rss>