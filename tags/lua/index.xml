<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Lua on DUDOR&#39;s BLOG</title>
    <link>https://dudor.github.io/tags/lua/</link>
    <description>Recent content in Lua on DUDOR&#39;s BLOG</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Sun, 12 Jul 2015 18:14:47 +0000</lastBuildDate>
    
	<atom:link href="https://dudor.github.io/tags/lua/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>lua学习笔记</title>
      <link>https://dudor.github.io/2015/07/12/lua%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Sun, 12 Jul 2015 18:14:47 +0000</pubDate>
      
      <guid>https://dudor.github.io/2015/07/12/lua%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
      <description>##语法约定 lua中的变量名定义规则和大多数编程语言一样，是任何非数字开头的由字母，数字和下划线组成的字符串。 lua是大小写敏感的。 ##字符串 字符串是由单引号或双引号或N级中括号定义的，比如 a = &amp;lsquo;dudor&amp;rsquo; a = &amp;ldquo;dudor&amp;rdquo; a = [[dudor]] 上面三个值是相等的。 其中由N级中括号定义的方式比较特别，在别的语言中很少见到。N级中括号是在两个中括号中插入N个等号定义为第N级中括号。 ##注释 注释是用两个横线定义的，单行注释是 &amp;ndash; ，多行注释为 &amp;ndash;[
##类型 lua中有8种类型： nil, boolean, number, string, function, userdata, thread, and table.
 nil类似于c中的NULL,通常用来表示一个无意义的值。 boolean有false和true两个值。 number代表双精度浮点数字。 string是上面所说的字符串。 userdata用来将任意类型的c数据保存在lua变量中。它不能被lua创建和修改。 thread代表了一种线程，当然和C中的线程不由，类似于UNITY3D中的coroutine，它可以在所有的系统中使用，不管系统是否支持多线程。 table可以认为是一种字典类型  ##变量 在lua中，使用变量是不需要声明的，并且它们默认是全局变量，除非在前面注明了local关键字
##流程控制 1. if &amp;hellip; then &amp;hellip; elseif &amp;hellip; then &amp;hellip; else &amp;hellip; end 2. while &amp;hellip; do &amp;hellip; end 3. repeat &amp;hellip; until &amp;hellip; 4. for 变量=初值,终值,步进 do &amp;hellip; end 5.</description>
    </item>
    
  </channel>
</rss>